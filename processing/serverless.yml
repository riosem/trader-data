service: trader-data-processing

frameworkVersion: "3"

provider:
  name: aws
  region: us-east-2
  runtime: python3.10
  deploymentBucket:
    name: ${param:deployment-bucket}
    serverSideEncryption: AES256
  timeout: 60
  environment:
    REGION: ${self:provider.region}
    DEPLOY_ENV: ${opt:stage}
    DATA_COLLECTION_BUCKET_NAME: ${self:custom.data_collection_bucket_name}
    MEMORY: ${self:custom.memory}
    CPU: ${self:custom.cpu}
    CONTAINER_PORT: ${self:custom.container_port}
    HOST_PORT: ${self:custom.host_port}
    EXECUTION_ROLE_ARN: ${self:custom.execution_role_arn}
    TASK_ROLE_ARN: ${self:custom.task_role_arn}
    SERVICE_NAME: ${self:custom.service}
    COINBASE_API_KEY: ${self:custom.coinbase_api_key}
    COINBASE_API_SECRET: ${self:custom.coinbase_api_secret}
    AUTH0_ASSISTANT_AUDIENCE: ${self:custom.auth0_assistant_audience}
    ASSISTANT_API_KEY: ${self:custom.assistant_api_key}
    AUTH0_ASSISTANT_CLIENT_ID: ${self:custom.auth0_assistant_client_id}
    AUTH0_ASSISTANT_CLIENT_SECRET: ${self:custom.auth0_assistant_client_secret}
    AUTH0_OAUTH_URL: ${self:custom.env.auth0_oauth_url}
    CACHE_TABLE_NAME: ${self:custom.cache_table_name}
    SUBNET_ID: ${self:custom.subnet_id}
    SECURITY_GROUP_ID: ${self:custom.env.security_group_id}
  tags:
    app_name: ${self:service}-${opt:stage}

custom:
  stage: ${opt:stage}
  region: ${opt:region}
  task_definition: ${param:task_definition}
  env: ${file(slsenvs.yml):${self:custom.stage}}
  memory: ${param:memory, 512}
  cpu: ${param:cpu, 256}
  container_port: ${param:container_port, 80}
  host_port: ${param:host_port, 80}
  execution_role_arn: ${param:execution_role_arn, '${self:custom.env.exec_role_arn}'}
  task_role_arn: ${param:task_role_arn, '${self:custom.env.task_role_arn}'}
  subnet_id: ${param:subnet_id, '${self:custom.env.subnet_id}'}
  service: ${param:service, '${self:service}-service-${self:custom.stage}-${self:custom.region}'}
  coinbase_api_key: ${param:coinbase_api_key, '${self:custom.env.coinbase_api_key}'}
  coinbase_api_secret: ${param:coinbase_api_secret, '${self:custom.env.coinbase_api_secret}'}
  auth0_assistant_client_id: ${param:auth0_assistant_client_id, '${self:custom.env.auth0_assistant_client_id}'}
  auth0_assistant_client_secret: ${param:auth0_assistant_client_secret, '${self:custom.env.auth0_assistant_client_secret}'}
  auth0_assistant_audience: ${param:auth0_assistant_audience, '${self:custom.env.auth0_assistant_audience}'}
  auth0_oauth_url: ${param:auth0_oauth_url, '${self:custom.env.auth0_oauth_url}'}
  assistant_api_key: ${param:assistant_api_key, '${self:custom.env.assistant_api_key}'}
  cache_table_name: ${param:cache_table_name, '${self:custom.env.cache_table_name}'}
  data_collection_bucket_name: ${param:data_collection_bucket_name, '${self:custom.env.data_collection_bucket_name}'}
  security_group_id: ${param:security_group_id, '${self:custom.env.security_group_id}'}
  logRetentionInDays: 7
  pythonRequirements:
    dockerizePip: true
    slim: true
    layer:
      compatibleRuntimes:
        - python3.10

functions:
  ecs_task_handler:
    handler: consumer.ecs_orchestrate.sqs_record_handler
    role: arn:aws:iam::${aws:accountId}:role/${self:service}-role-blue-${self:custom.stage}-${self:custom.region}
    timeout: 30
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TaskQueue
              - Arn

resources:
  Resources:
    DataProcessCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:service}-cluster-${self:custom.stage}
        Tags:
          - Key: app_name
            Value: ${self:provider.tags.app_name}
    DataProcessService:
      Type: AWS::ECS::Service
      Properties:
        Cluster: ${self:service}-cluster-${self:custom.stage}
        TaskDefinition: arn:aws:ecs:${self:custom.region}:${aws:accountId}:task-definition/${self:custom.task_definition}
        DesiredCount: 0
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - ${self:custom.env.security_group_id}
            Subnets:
              - ${self:custom.env.subnet_id}
        Tags:
          - Key: app_name
            Value: ${self:provider.tags.app_name}
    # DataProcessTaskDefinition:
    #   Type: "AWS::ECS::TaskDefinition"
    #   Properties:
    #     Family: "${self:service}-task-family"
    #     ContainerDefinitions:
    #       - Name: ${self:service}-container
    #         Image: ${param:container-image}
    #         Memory: 512
    #         Cpu: 256
    #         Essential: true
    #         PortMappings:
    #           - ContainerPort: 80
    #             HostPort: 80
    #     NetworkMode: "awsvpc"
    #     RequiresCompatibilities:
    #       - "FARGATE"
    #     Cpu: "256"
    #     Memory: "512"
    #     ExecutionRoleArn: arn:aws:iam::${aws:accountId}:role/${self:service}-task-execution-role-blue-${self:custom.stage}-${self:custom.region}
    #     TaskRoleArn: arn:aws:iam::${aws:accountId}:role/${self:service}-task-handler-role-blue-${self:custom.stage}-${self:custom.region}
    #     Tags:
    #       - Key: app_name
    #         Value: ${self:provider.tags.app_name}
    DataTrainLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /ecs/${self:service}-${self:custom.stage}
        RetentionInDays: 7
        Tags:
          - Key: app_name
            Value: ${self:provider.tags.app_name}
    TaskQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:service}-task-queue-${self:custom.stage}.fifo
        MessageRetentionPeriod: 60
        VisibilityTimeout: 300
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt TaskDLQ.Arn
          maxReceiveCount: 1
        Tags:
            - Key: app_name
              Value: ${self:provider.tags.app_name}
    TaskDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:service}-task-dlq-${self:custom.stage}.fifo
        Tags:
          - Key: app_name
            Value: ${self:provider.tags.app_name}

plugins:
  - serverless-deployment-bucket
  - serverless-plugin-log-retention
  - serverless-python-requirements
